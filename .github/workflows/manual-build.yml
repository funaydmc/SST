name: Manual Build

# This workflow can be triggered manually from the Actions tab
on:
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build Configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - Debug
          - Release
      platform:
        description: 'Build Platform'
        required: true
        default: 'x64'
        type: choice
        options:
          - x86
          - x64
          - 'All Platforms'
      upload_artifacts:
        description: 'Upload build artifacts'
        required: false
        default: true
        type: boolean

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./StellaSora-Tool.sln
  
  # Project name for output
  PROJECT_NAME: StellaSora-Tool
  
  # Launcher project name
  LAUNCHER_NAME: StellaSora-Launcher

jobs:
  build:
    runs-on: windows-latest
    
    strategy:
      matrix:
        platform: ${{ github.event.inputs.platform == 'All Platforms' && fromJson('["x86", "x64"]') || fromJson(format('["{0}"]', github.event.inputs.platform)) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for better build info
        fetch-depth: 0

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '[17.0,18.0)'

    - name: Setup Windows SDK
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
      with:
        sdk-version: 20348

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build Solution
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=${{ github.event.inputs.configuration }} /p:Platform=${{ matrix.platform }} ${{env.SOLUTION_FILE_PATH}}

    - name: List build outputs
      shell: powershell
      run: |
        Write-Host "Build outputs:"
        if (Test-Path "bin") {
          Get-ChildItem -Path "bin" -Recurse -File | ForEach-Object {
            Write-Host "  $($_.FullName)"
          }
        } else {
          Write-Host "  No bin directory found"
        }

    - name: Prepare artifacts
      if: ${{ github.event.inputs.upload_artifacts == 'true' }}
      shell: powershell
      run: |
        $artifactPath = "artifacts"
        New-Item -ItemType Directory -Force -Path $artifactPath
        
        $configPlatform = "${{ github.event.inputs.configuration }}-${{ matrix.platform }}"
        $buildPath = "bin\$configPlatform"
        
        if (Test-Path $buildPath) {
          Write-Host "Looking for build outputs in $buildPath"
          
          # Find the target DLL (StellaSora-Tool.dll)
          $dllFiles = Get-ChildItem -Path $buildPath -Name "*.dll" -File
          $targetDll = $dllFiles | Where-Object { $_ -like "*StellaSora*" -or $_ -like "*Tool*" }
          
          # Find the launcher executable (StellaSora-Launcher.exe)
          $exeFiles = Get-ChildItem -Path $buildPath -Name "*.exe" -File
          $targetExe = $exeFiles | Where-Object { $_ -like "*StellaSora*" -or $_ -like "*Launcher*" }
          
          if (-not $targetDll) {
            # Fallback to any DLL files if target not found by name
            $targetDll = $dllFiles
          }
          
          if (-not $targetExe) {
            # Fallback to any EXE files if target not found by name
            $targetExe = $exeFiles
          }
          
          $copiedFiles = @()
          
          # Copy DLL files
          if ($targetDll) {
            foreach ($dll in $targetDll) {
              $sourcePath = Join-Path $buildPath $dll
              $destPath = Join-Path $artifactPath $dll
              Copy-Item -Path $sourcePath -Destination $destPath -Force
              Write-Host "Copied DLL: $dll"
              $copiedFiles += $dll
            }
          } else {
            Write-Host "Warning: No DLL files found in $buildPath"
          }
          
          # Copy EXE files
          if ($targetExe) {
            foreach ($exe in $targetExe) {
              $sourcePath = Join-Path $buildPath $exe
              $destPath = Join-Path $artifactPath $exe
              Copy-Item -Path $sourcePath -Destination $destPath -Force
              Write-Host "Copied EXE: $exe"
              $copiedFiles += $exe
            }
          } else {
            Write-Host "Warning: No EXE files found in $buildPath"
          }
          
          # Ensure we have at least one file
          if ($copiedFiles.Count -eq 0) {
            Write-Host "Error: No build outputs found"
            exit 1
          }
          
          # Create a build info file
          $buildInfo = @{
            "Build Date" = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            "Configuration" = "${{ github.event.inputs.configuration }}"
            "Platform" = "${{ matrix.platform }}"
            "Commit SHA" = "${{ github.sha }}"
            "Commit Message" = "${{ github.event.head_commit.message }}"
            "Branch" = "${{ github.ref_name }}"
            "DLL Files" = ($targetDll -join ", ")
            "EXE Files" = ($targetExe -join ", ")
            "All Files" = ($copiedFiles -join ", ")
          }
          
          $buildInfo | ConvertTo-Json | Out-File -FilePath "$artifactPath\build-info.json" -Encoding UTF8
          
          Write-Host "Artifact contents:"
          Get-ChildItem -Path $artifactPath -Recurse | ForEach-Object {
            Write-Host "  $($_.Name)"
          }
        } else {
          Write-Host "Build path $buildPath not found"
          exit 1
        }

    - name: Upload Build Artifacts
      if: ${{ github.event.inputs.upload_artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-and-${{ env.LAUNCHER_NAME }}-${{ github.event.inputs.configuration }}-${{ matrix.platform }}-${{ github.run_number }}
        path: artifacts/
        retention-days: 30
        compression-level: 6

    - name: Build Summary
      shell: powershell
      run: |
        Write-Host "=== Build Summary ==="
        Write-Host "Projects: ${{ env.PROJECT_NAME }} + ${{ env.LAUNCHER_NAME }}"
        Write-Host "Configuration: ${{ github.event.inputs.configuration }}"
        Write-Host "Platform: ${{ matrix.platform }}"
        Write-Host "Commit: ${{ github.sha }}"
        Write-Host "Branch: ${{ github.ref_name }}"
        Write-Host "Runner: ${{ runner.os }} ${{ runner.arch }}"
        Write-Host "Artifacts uploaded: ${{ github.event.inputs.upload_artifacts }}"
        Write-Host ""
        Write-Host "Expected outputs:"
        Write-Host "  - ${{ env.PROJECT_NAME }}.dll (Main cheat library)"
        Write-Host "  - ${{ env.LAUNCHER_NAME }}.exe (Game launcher & injector)"
        Write-Host "===================="

  create-release:
    if: ${{ github.event.inputs.upload_artifacts == 'true' && github.event.inputs.platform == 'All Platforms' }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts
    
    - name: Create Release Bundle
      run: |
        mkdir -p release-bundle
        cd all-artifacts
        
        # Create a combined release with both platforms
        for dir in */; do
          platform=$(echo $dir | grep -o 'x[68][46]')
          config="${{ github.event.inputs.configuration }}"
          
          if [ -n "$platform" ]; then
            mkdir -p "../release-bundle/$platform"
            # Copy DLL files, EXE files, and build info
            cp "$dir"*.dll "../release-bundle/$platform/" 2>/dev/null || true
            cp "$dir"*.exe "../release-bundle/$platform/" 2>/dev/null || true
            cp "$dir"build-info.json "../release-bundle/$platform/" 2>/dev/null || true
          fi
        done
        
        cd ../release-bundle
        
        # Create README for the release
        cat > README.md << EOF
        # ${{ env.PROJECT_NAME }} & ${{ env.LAUNCHER_NAME }} Build
        
        **Build Information:**
        - Configuration: ${{ github.event.inputs.configuration }}
        - Date: $(date -u)
        - Commit: ${{ github.sha }}
        - Branch: ${{ github.ref_name }}
        
        **Available Platforms:**
        $(ls -1 | grep -E 'x(86|64)' | sed 's/^/- /')
        
        **Contents:**
        Each platform directory contains:
        - **${{ env.PROJECT_NAME }}.dll** - Main cheat/tool library
        - **${{ env.LAUNCHER_NAME }}.exe** - Game launcher and DLL injector
        - **build-info.json** - Build metadata
        
        **Usage:**
        1. Choose the appropriate platform directory (x86 or x64)
        2. Run ${{ env.LAUNCHER_NAME }}.exe to launch your game with the tool
        3. The launcher will automatically inject ${{ env.PROJECT_NAME }}.dll
        
        **Launcher Usage:**
        \`\`\`
        # Interactive mode (prompts for game path)
        ${{ env.LAUNCHER_NAME }}.exe
        
        # Specify game path
        ${{ env.LAUNCHER_NAME }}.exe "C:\Games\YourGame.exe"
        
        # Specify both game and DLL paths
        ${{ env.LAUNCHER_NAME }}.exe "C:\Games\YourGame.exe" "${{ env.PROJECT_NAME }}.dll"
        \`\`\`
        
        **Important:**
        - Run as Administrator for proper injection
        - Disable antivirus temporarily if needed
        - For educational/research purposes only
        
        **Note:** This is an automated build. Please verify compatibility with your target application.
        EOF
        
        # Create ZIP for each platform
        for platform_dir in x*/; do
          if [ -d "$platform_dir" ]; then
            platform=$(basename "$platform_dir")
            zip -r "${{ env.PROJECT_NAME }}-Complete-${{ github.event.inputs.configuration }}-${platform}.zip" "$platform_dir"
          fi
        done
        
        ls -la

    - name: Upload Release Bundle
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-and-${{ env.LAUNCHER_NAME }}-Complete-${{ github.event.inputs.configuration }}-${{ github.run_number }}
        path: release-bundle/
        retention-days: 90